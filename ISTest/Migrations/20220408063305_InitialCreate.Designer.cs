// <auto-generated />
using ISTest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ISTest.Migrations
{
    [DbContext(typeof(BeverageContext))]
    [Migration("20220408063305_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ISTest.Models.Beverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Price")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("Volume")
                        .HasPrecision(2, 2)
                        .HasColumnType("decimal(2,2)");

                    b.HasKey("Id");

                    b.ToTable("Beverages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Coca-Cola",
                            Price = 20m,
                            Volume = 0.33m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fanta",
                            Price = 17m,
                            Volume = 0.33m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sprite",
                            Price = 15m,
                            Volume = 0.33m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Merinda",
                            Price = 22m,
                            Volume = 0.33m
                        },
                        new
                        {
                            Id = 5,
                            Name = "BonAqua",
                            Price = 23m,
                            Volume = 0.5m
                        });
                });

            modelBuilder.Entity("ISTest.Models.BeverageToVendingMachine", b =>
                {
                    b.Property<int>("BeverageId")
                        .HasColumnType("int");

                    b.Property<int>("VendingMachineId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("BeverageId", "VendingMachineId");

                    b.HasIndex("VendingMachineId");

                    b.ToTable("BeverageToVendingMachines");

                    b.HasData(
                        new
                        {
                            BeverageId = 1,
                            VendingMachineId = 1,
                            Number = 10
                        },
                        new
                        {
                            BeverageId = 2,
                            VendingMachineId = 1,
                            Number = 10
                        },
                        new
                        {
                            BeverageId = 3,
                            VendingMachineId = 1,
                            Number = 10
                        },
                        new
                        {
                            BeverageId = 4,
                            VendingMachineId = 1,
                            Number = 10
                        });
                });

            modelBuilder.Entity("ISTest.Models.Coin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImagePath")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Value")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.ToTable("Coins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagePath = "97(16)_1R_R.gif",
                            Value = 1m
                        },
                        new
                        {
                            Id = 2,
                            ImagePath = "97(16)_2R_R.gif",
                            Value = 2m
                        },
                        new
                        {
                            Id = 3,
                            ImagePath = "97(16)_5R_R.gif",
                            Value = 5m
                        },
                        new
                        {
                            Id = 4,
                            ImagePath = "97(16)_10R_R.gif",
                            Value = 10m
                        });
                });

            modelBuilder.Entity("ISTest.Models.CoinToVendingMachine", b =>
                {
                    b.Property<int>("CoinId")
                        .HasColumnType("int");

                    b.Property<int>("VendingMachineId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.HasKey("CoinId", "VendingMachineId");

                    b.HasIndex("VendingMachineId");

                    b.ToTable("CoinToVendingMachines");

                    b.HasData(
                        new
                        {
                            CoinId = 1,
                            VendingMachineId = 1,
                            Amount = 100,
                            Disabled = false
                        },
                        new
                        {
                            CoinId = 2,
                            VendingMachineId = 1,
                            Amount = 100,
                            Disabled = false
                        },
                        new
                        {
                            CoinId = 3,
                            VendingMachineId = 1,
                            Amount = 100,
                            Disabled = false
                        },
                        new
                        {
                            CoinId = 4,
                            VendingMachineId = 1,
                            Amount = 100,
                            Disabled = false
                        });
                });

            modelBuilder.Entity("ISTest.Models.VendingMachine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("VendingMachines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Автомат на Уральской"
                        });
                });

            modelBuilder.Entity("ISTest.Models.BeverageToVendingMachine", b =>
                {
                    b.HasOne("ISTest.Models.Beverage", "Beverage")
                        .WithMany("BeverageToVendingMachines")
                        .HasForeignKey("BeverageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISTest.Models.VendingMachine", "VendingMachine")
                        .WithMany("BeverageToVendingMachines")
                        .HasForeignKey("VendingMachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beverage");

                    b.Navigation("VendingMachine");
                });

            modelBuilder.Entity("ISTest.Models.CoinToVendingMachine", b =>
                {
                    b.HasOne("ISTest.Models.Coin", "Coin")
                        .WithMany("CoinToVendingMachines")
                        .HasForeignKey("CoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISTest.Models.VendingMachine", "VendingMachine")
                        .WithMany("CoinToVendingMachines")
                        .HasForeignKey("VendingMachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coin");

                    b.Navigation("VendingMachine");
                });

            modelBuilder.Entity("ISTest.Models.Beverage", b =>
                {
                    b.Navigation("BeverageToVendingMachines");
                });

            modelBuilder.Entity("ISTest.Models.Coin", b =>
                {
                    b.Navigation("CoinToVendingMachines");
                });

            modelBuilder.Entity("ISTest.Models.VendingMachine", b =>
                {
                    b.Navigation("BeverageToVendingMachines");

                    b.Navigation("CoinToVendingMachines");
                });
#pragma warning restore 612, 618
        }
    }
}
